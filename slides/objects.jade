section
  section
    :markdown
      ## Objects
      * JavaScript is an object-oriented language
      * Everything in JavaScript acts like an object: <br/>
        numbers, strings, even functions
      * There are only two exceptions to this rule: <br/>
        `null` and `undefined`

    pre.fragment: code.
        false.toString();     // -> 'false'
        [1, 2, 3].toString(); // -> '1, 2, 3'

        // functions are objects too:
        function Foo() {}
        Foo.bar = 1;
        Foo.bar;          // -> 1

        var undef;        // value will be undefined
        undef.toString(); // TypeError: Cannot call method 'toString' of undefined

    aside.notes
      Mention that 'undefined' is not a protected name and can in fact be reassigned

  section
    h2 Sometimes it's not that obvious
    ul
      li Why does this not work?

      pre: code.
          2.toString();         // -> SyntaxError

      li.fragment What's going on here?
        ul
          li The period causes the parser to assume
            |this is a floating point number
          li The next token is expected to be a digit

      li.fragment How do we fix it? Force the parser to change its mind:

        pre: code.
          2..toString();    // second dot works correctly
          2 .toString();    // space before the dot
          (2).toString();   // force evaluation order

  section
    h2 Objects are Hashmaps
    ul
      li Objects in JavaScript map keys to values:

        pre: code.
          // empty object literal
          var obj = {};

          // literal object with properties
          var obj = { foo: "bar", value: 42 };

      li.fragment We can access them in two ways:

        pre: code.
          obj.value;    // -> 42
          obj['value']  // -> 42

      li.fragment To remove a property, use the <code>delete</code> operator

        pre: code.
          delete obj.foo;
          obj;          // -> { value: 42 }

      li.fragment Setting the value to <code>null</code> or <code>undefined</code>
        |would only remove the <em>value</em>, not the property itself!


  section
    h2 Objects are HashMaps, Part II
    ul
      li We can iterate over all keys of an object <br/>
        |by using a <code>for in</code> loop:

        pre: code.
          var obj = {
            foo: 1,
            bar: 2,
            other: 'string'
          };

          for (var key in obj) {
            console.log(key + '=' + obj[key]);
          }

          // this prints out:
          // foo=1
          // bar=2
          // other=string

  section
    h2 Objects are HashMaps, Part III
    ul 
      li If objects are hashmaps, and functions are objects â€“ <br/>
        |What's to stop us from doing this?

        pre: code.
          // function instead of object literal
          var obj = function() {};
          obj.foo = 1;
          obj.bar = 2;
          obj.other = 'string';

          for (var key in obj) {
            console.log(key + '=' + obj[key]);
          }

      li Result: it works!

        pre: code.
          foo=1
          bar=2
          other=string

      li Question: Does that seem like a good idea?
