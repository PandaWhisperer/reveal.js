section
  section
    h1 Inheritance

  section
    h2 Inheritance
    ul
      li Let's take this one step further:
      li <code>Car.prototype</code> can be an arbitrary object
      li i.e. we can use an instance produced by another constructor 

        pre: code.
          function Vehicle(wheels) {
            this.wheels = wheels;
          }

          // redefine Car.prototype
          Car.prototype = new Vehicle(4);
          Car.prototype.drive = function() {...}

          var ferrari = new Car("Ferrari");
          var ford    = new Car("Ford");

          ferarri.wheels; // -> 4

  section
    h2 Dynamic inheritance
    ul
      li What if we add something to the <code>Vehicle</code> prototype?

        pre: code.
          Vehicle.prototype.getAxes = function() {
            // assume 2 wheels per axis
            return this.wheels / 2;
          }

          for (var key in ferrari) { 
            console.log(key + '=' + ferrari[key]);
          }

      li.fragment Result?

        pre: code.
          name=Ferrari
          wheels=4
          drive=function () {...}
          getAxes=function () {...}

      li.fragment The new function automatically appears to be a member
        |of our <code>Car</code> instance
      li.fragment We didn't even have to call the constructor again



  section
    :markdown
      ## What have we learned?
      * All objects that share the same *prototype* share all
        the properties defined on that prototype
      * `for in` iterates over *all* properties, 
        including those defined on the *prototype*
      * In fact, looking up a property of an object traverses the
        *entire* "prototype-chain" until either a match is 
        found or the end of the chain is reached <br/>
        (i.e. `prototype == undefined`)

